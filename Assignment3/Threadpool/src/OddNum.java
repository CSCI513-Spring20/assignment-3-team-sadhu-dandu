import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

abstract class Task implements Runnable{
    String taskname;
    boolean isCompleted;

    public Task(String taskname) {
        this.taskname = taskname;
        this.isCompleted = false;
    }

    public String getTask() {
        return taskname;
    }

    public void setIsCompleted() {
        isCompleted = true;
    }
}

public class OddNum extends Task {
    private int start,end;
    private ArrayList<Integer> OddNumbers;
    private ArrayList<Integer> EvenNumbers;
    String taskname;
    boolean isCompleted;


    // Constructor of the class
    public OddNum(int first, int last) {
        super("Generation of odd/even Numbers in between:(" + first + "," + last+")");
        OddNumbers = new ArrayList<Integer>();
        EvenNumbers = new ArrayList<Integer>();
        this.start = first;
        this.end = last;
    }

    // Method to Check if a number is odd or even
    public static boolean isodd(int val) {
        if( val % 2 == 0) {
            return false;
        }
        return true;
    }
    public static boolean iseven(int val) {
        if( val % 2 == 0) {
            return true;
        }
        return false;
    }
    @Override
    public void run() {
        System.out.println(this.getTask() +"\t"+ Thread.currentThread().getName()+"\t started running");
        for (int i = start; i <= end; ++i) {
            if (isodd(i)) {
                OddNumbers.add(i);
            }
            else{
                EvenNumbers.add(i);
            }
        }
        System.out.println( this.getTask() +"\t" +"odd numbers generated are: " + Arrays.toString(OddNumbers.toArray()) );
        System.out.println( this.getTask() +"\t" +"Even numbers generated are: " + Arrays.toString(EvenNumbers.toArray()) );
        System.out.println( this.getTask() + "\t" + OddNumbers.size() + " Odd numbers generated by " + Thread.currentThread().getName());
        System.out.println( this.getTask() + "\t" + EvenNumbers.size() + " Even numbers generated by " + Thread.currentThread().getName());
    }


    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the upper bound of input range: ");
        int uB = scanner.nextInt();

        int tN = 10; //number of threads required to complete task
        int nt = 10;//number of threads in the threadpool

        pooling threadPool = new pooling(nt);
        int tSP = (int) Math.floor(uB / tN);//task size per single thread

        ArrayList<OddNum> tasks = new ArrayList<OddNum>();
        int lL = 0;

        for(int uL = (lL + tSP); uL <= uB; uL = lL + tSP)
        {
            OddNum task = new OddNum(lL, uL - 1);
           threadPool.taskexecution(task);
            tasks.add(task);
            lL = uL;


        }

        threadPool.shutdown();
        scanner.close();
    }
}

